// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProdajaMobilnihAplikacija.WebAPI.Database;

namespace ProdajaMobilnihAplikacija.WebAPI.Migrations
{
    [DbContext(typeof(Prodaja_Mobilnog_SoftveraContext))]
    [Migration("20211009123550_migi07")]
    partial class migi07
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Analiza", b =>
                {
                    b.Property<int>("AnalizaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnalizaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumAnalize")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Datum_analize");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SoftverId")
                        .HasColumnType("int")
                        .HasColumnName("SoftverID");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int")
                        .HasColumnName("ZaposlenikID");

                    b.HasKey("AnalizaId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("SoftverId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Analiza");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrzavaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Oznaka")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DrzavaId");

                    b.ToTable("Drzava");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Fakultet", b =>
                {
                    b.Property<int>("FakultetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FakultetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("Univerzitet")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.HasKey("FakultetId");

                    b.ToTable("Fakultet");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GradID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrzavaId")
                        .HasColumnType("int")
                        .HasColumnName("DrzavaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("GradId");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Kartica", b =>
                {
                    b.Property<int>("KarticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KarticaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Broj")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("BrojKartice")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)");

                    b.HasKey("KarticaId");

                    b.ToTable("Kartica");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Opis")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Oznaka")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KategorijaId");

                    b.ToTable("Kategorija");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Klijent", b =>
                {
                    b.Property<int>("KlijentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KlijentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BrojTel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DatumRodjenja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Datum_rodjenja");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Ime")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("KarticaId")
                        .HasColumnType("int")
                        .HasColumnName("KarticaID");

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaHash")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LozinkaSalt")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Prezime")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("KlijentId");

                    b.HasIndex("GradId");

                    b.HasIndex("KarticaId");

                    b.ToTable("Klijent");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.KorisnickiNalog", b =>
                {
                    b.Property<int>("KorisnickiNalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnickiNalogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipKorisnickogNaloga")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KorisnickiNalogId");

                    b.ToTable("KorisnickiNalog");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.MojSoftver", b =>
                {
                    b.Property<int>("MojSoftverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MojSoftverID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<string>("Komentar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int?>("OcjenaId")
                        .HasColumnType("int")
                        .HasColumnName("OcjenaID");

                    b.Property<int?>("RacunId")
                        .HasColumnType("int")
                        .HasColumnName("RacunID");

                    b.Property<int?>("SoftverId")
                        .HasColumnType("int")
                        .HasColumnName("SoftverID");

                    b.HasKey("MojSoftverId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("OcjenaId");

                    b.HasIndex("RacunId");

                    b.HasIndex("SoftverId");

                    b.ToTable("MojSoftver");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Ocjena", b =>
                {
                    b.Property<int>("OcjenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OcjenaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Komentar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ocjena")
                        .HasColumnType("int")
                        .HasColumnName("Ocjena");

                    b.HasKey("OcjenaId");

                    b.ToTable("Ocjena");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Racun", b =>
                {
                    b.Property<int>("RacunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RacunID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<string>("NacinPlacanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RacunId");

                    b.ToTable("Racun");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Softver", b =>
                {
                    b.Property<int>("SoftverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SoftverID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cijena")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("PositiveDifferent")
                        .HasColumnType("float");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Verzija")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SoftverId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Softver");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Zaposlenik", b =>
                {
                    b.Property<int>("ZaposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZaposlenikID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<string>("DatumRodjenja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Datum_rodjenja");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Ime")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("KontaktBr")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("Kontakt_br");

                    b.Property<int?>("KorisnickiNalogId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnickiNalogID");

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LozinkaSalt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prezime")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Spol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ZaposlenikId");

                    b.HasIndex("FakultetId");

                    b.HasIndex("GradId");

                    b.HasIndex("KorisnickiNalogId");

                    b.ToTable("Zaposlenik");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Analiza", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Softver", "Softver")
                        .WithMany()
                        .HasForeignKey("SoftverId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Zaposlenik", "Zaposlenik")
                        .WithMany()
                        .HasForeignKey("ZaposlenikId");

                    b.Navigation("Klijent");

                    b.Navigation("Softver");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Grad", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaId");

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Klijent", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaId");

                    b.Navigation("Grad");

                    b.Navigation("Kartica");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.MojSoftver", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Ocjena", "OcjenaNavigation")
                        .WithMany()
                        .HasForeignKey("OcjenaId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Racun", "Racun")
                        .WithMany()
                        .HasForeignKey("RacunId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Softver", "Softver")
                        .WithMany()
                        .HasForeignKey("SoftverId");

                    b.Navigation("Klijent");

                    b.Navigation("OcjenaNavigation");

                    b.Navigation("Racun");

                    b.Navigation("Softver");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Softver", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaId");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("ProdajaMobilnihAplikacija.WebAPI.Database.Zaposlenik", b =>
                {
                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId");

                    b.HasOne("ProdajaMobilnihAplikacija.WebAPI.Database.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogId");

                    b.Navigation("Fakultet");

                    b.Navigation("Grad");

                    b.Navigation("KorisnickiNalog");
                });
#pragma warning restore 612, 618
        }
    }
}
